[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open Source Software Development: A socio-technical course",
    "section": "",
    "text": "Welcome to the materials for a course on open source software development, taught at the School of Information at the University of Texas at Austin. The course is taught by James Howison, with contributions from a set of wonderful TAs, including Chongyan Chen.\nThe course was developed as an undergraduate version of a course on Peer Production: Open Source, Wikipedia, and Beyond.\nI call this a “socio-technical course” because I interleave social theory about open source (such as theories of motivation, approaches to governance, sources of lack of diversity) in among the technical skills needed to participate in open source projects (git and github commands, markdown, unit testing, packaging). This interleaving is inspired equally by Karl Fogel’s approach in Producing Open Source Software, and the intellectual traditions of Sociotechnical Systems, Sociomateriality, and the Consortium for the Science of Sociotechnical Systems (CSST).\nIn these materials I present these in two separate sequences: “insights” and “skills”. When I teach, though, I interleave them in what I hope are synergistic ways. For example, when teaching about coordination theory, the week includes the git and github approaches to managing dependencies (such as identifying and resolving conflicts, as well as branching). I pair literature on knowledge sharing up with skills to do it, such as understanding Markdown and referring to Issues/Commits. You can see this interleaving in the most recent syllabus at Section 2.1.\nThe course begins with a two-part physical in-class exercise: students fold paper planes, and share improvements. The first exercise addresses how patents and copyright affect sharing, building on each others work, and the division of claims. The second takes a more technical tack, and addresses management of versions and conflicts. These exercises give a physical analog for the topics in the course, giving a grounding for discussing intellectual concepts and git commands."
  },
  {
    "objectID": "oss_syllabus.html",
    "href": "oss_syllabus.html",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "",
    "text": "3 Objectives and Assignments\nThis course explores “open source software development” which is a name for the open collaborations that produce open source software. Open source software is a thing that is built by people, an artifact. But the way that it is developed, the way that people work together to build it is of great interest. “The open source way” is of practical interest for everyone building software, because open source development has lead the creation of ways of working used throughout software work. For social and organizational scholars, “the open source way” is of inte3rest in advancing our theories of how people can work together and how technology matters.\nThe “open source way” is also known as “peer production” and that way of working extends beyond open source, to places like Wikipedia. Perhaps not coincidentally the Wikipedia page on Peer Production is quite useful:\nAs we learn about open source and peer production we’ll learn to distinguish it from different kinds of online collaborations, such as crowdsourcing, citizen science, question and answer sites, and mere sharing of code. Near synonyms for the way of working taught in this course are: “The open source way”, “Open collaboration”, “Open mass production”.\nThis is a course is about a sociotechnical phenomenon and it takes a sociotechnical approach. In practice this means that we’ll be learning both conceptual insight and practical skills. The course weaves together learning how to use key technologies of collaboration (e.g., git, github, travisCI, markdown) at the same time that we learn social and organizational theory about peer production (e.g., the role of copyright licenses, motivations of participants, governance models, coordination theory, models of collaboration risk, cultures of collaboration).\nThere are no prereqs for this course. While we will be discussing software development students will not be required to program. We will use the command line as we learn to use git and github everything will be covered in class. I try to build a set of analogies for git and github, going beyond teaching the commands to give ways to think about git.\nStudents will need access to a computer for classes, any version of Windows, Mac, or Linux will do. Students facing difficulties with their IT should contact the iSchool help desk (via help@ischool.utexas.edu) who can refer on to other resources as available."
  },
  {
    "objectID": "oss_syllabus.html#sec-syllabus",
    "href": "oss_syllabus.html#sec-syllabus",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "2.1 Syllabus",
    "text": "2.1 Syllabus\nOfficial, updated version of syllabus always online at:\nhttps://howisonlab.github.io/open_source_software_course/oss_syllabus.html\n\n\n\n\n \n  \n    Course \n    I 320D Topics in Human-Centered Data Science : Open Source Software Development \n  \n \n\n  \n    Professor \n    James Howison \n  \n  \n    Meeting Time \n    Mondays and Wednesdays 9:30-10:45 \n  \n  \n    Location \n    SZB 5.414 \n  \n  \n    Semester \n    Spring 2023 \n  \n  \n    Unique No. \n    28120 \n  \n  \n    Office Hours \n    Wed 3-4pm via Zoom at https://utexas.zoom.com/my/howisonlab \n  \n  \n    Contact Email \n    jhowison@ischool.utexas.edu"
  },
  {
    "objectID": "oss_syllabus.html#learning-objectives",
    "href": "oss_syllabus.html#learning-objectives",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.1 Learning Objectives",
    "text": "3.1 Learning Objectives\nStudents will be able to:\n\nUnderstand what open source software is as an artifact\nUnderstand what is distinctive about the way that it is produced\nKnow how to interact with open source software projects\nKnow how the open source way has informed modern software development work (including in data science)\nConceptually distinguish open source from other organizational forms or phenomena, such as corporations, crowdsourcing, open access publishing, and communities of practice.\nReason about how, why, and when open source peer production works (and when it does not!)\nEngage critically with published research and popular discourse about open source\n\nPractically students will be able to:\n\nInstall and use git to manage versions in their own work\nParticipate in github hosted peer production (making and receiving pull requests)\nCreate and publish documents in markdown and wikitext format\nAsk technical questions that people want to answer\nAnalyze trace data from open source software projects"
  },
  {
    "objectID": "oss_syllabus.html#assessments",
    "href": "oss_syllabus.html#assessments",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.2 Assessments",
    "text": "3.2 Assessments\n\n\n\n\n \n  \n    Assignment \n    Percentage of Course Grade \n    Due Date \n  \n \n\n  \n    Class Participation (discussion and activites) \n    10% \n    Throughout course \n  \n  \n    Technical challenges \n    40% \n    Weekly homework challenges \n  \n  \n    Open source comparison paper \n    20% \n    Start of Spring Break \n  \n  \n    Open Source Trace Data analysis Project report \n    25% \n    Prior to Presentations \n  \n  \n    Project presentation \n    5% \n    Presentations \n  \n\n\n\n\n\nThere is no final exam for this course. 100-90:A, 90 > grade > 85: A-, 85 > grade > 80 B- and so on.\n\n3.2.1 Participation in class discussion and activities\nStudents are expected to attend class and to participate in discussion and activities. Students should email the professor prior to class if they cannot make it. Material throughout the course builds on earlier material (both technical and conceptual). If you cannot make class you should refer to the online materials first and then consult with your classmates. Office hours are not for personal replays of teaching, nor can they compensate for not participating in discussion.\nHints on participation:\n\nUseful participation can come from asking questions if you don’t understand the point someone is making. If you have questions, very likely others do to.\nYou can also summarize discussion which helps everyone by giving them something to test their understanding of the discussion.\nYou can challenge or disagree with people, sometimes that can be introducing a counter-example or questioning whether evidence really means what the speaker originally thought.\nI really welcome examples from your own experience. For example if there is an organization, movement, or line of thought (modern/traditional) in your culture that relates to open source development, I would love that to be part of the discussion.\n\n\n\n3.2.2 Technical Challenges\nThe course will have assignments based on the technical topics we are learning, including use of the DataCamp course (see below).\n\n\n3.2.3 Open Source comparison paper\nFor this assignment students will write a 1,000 word scholarly essay describing and analyzing efforts to adapt the “open source way” outside of software development. Students will be given a list of five projects they need to research and analyze to compare to “the open source way”. Examples could include open hardware, open governance, open culture. The paper should draw on the conceptual literature to compare and contrast the challenge faced by these adaptation efforts to what we’ve learned about “the open source way”. The paper will also describe the collaboration infrastructure used and compare it to the technologies we have learned in class).\nThe paper will be authored in Plain Text or Markdown and submitted via a pull request to the class github. Include your name in the filename and at the top of the document, and include a note at the top of the file telling me which formal citation approach you are using (e.g., APA, MLA, etc). Students are cautioned that as a scholarly paper proper citation and use of sources is required otherwise students will face academic misconduct proceedings. See “Academic Integrity” presentation if at all unsure.\n\n\n3.2.4 Open Source Trace Data analysis Project\nStudents will be introduced to datasets of archives of activity in open source projects and develop their own analysis. For example, students might want to highlight those participants that are most active over time in a project, show whether leadership has changed within projects, or analyze license usage over time.\nThere are three graded components, each to be submitted via a pull request. All components should reference the insight readings that we do throughout the course.\n\nIdentifying and describing a project. ~500 words. Authored in plain text or markdown (ensure file is encoded with Unicode UTF-8 encoding and Unix/LF-only line endings). This paper should clearly identify the intended analysis and argue for its relevance, including using literature to identify expectations. Include your name in the filename and at the top of the document, and include a note at the top of the file telling me which formal citation approach you are using (e.g., APA, MLA, etc).\nImplementing the analysis and report. ~500-1000 words, authored in RMarkdown, using the citation features. Students should describe the dataset, their analysis (possibly including graphs), and their interpretation. Students should compare their experience with their expectations described in the first paper and use at least two references from our conceptual literature to justify their inquiry. Create a folder in assignment_submission/trace_data_project/your_name and all files in that folder. Submit via a pull request from a branch created just for this submission (i.e., not master), and post that URL to the Canvas assignment, ensure this is a separate PR from your slide submission (below).\nCreating and giving a presentation on their participation. Presentations are limited to 5 minutes, this should be approx 4-6 slides long and be authored using Markdown that produces slides. Presentations will occur in our final class meeting. Submit via a pull request from a branch created just for this submission (ie not master), and post that URL to the Canvas assignment."
  },
  {
    "objectID": "oss_syllabus.html#materials",
    "href": "oss_syllabus.html#materials",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "3.3 Materials",
    "text": "3.3 Materials\nThere are no required texts for this course and no materials to purchase.\nReadings, tutorials, and will be provided via pages linked from the class calendar below.\nI will enroll the class in DataCamp, giving students free access to the DataCamp courses (including their premium courses). In particular we will be using their interactive course on git during classes in the first half of the course. I encourage students to explore their other course options during the semester."
  },
  {
    "objectID": "oss_syllabus.html#draft-course-schedule",
    "href": "oss_syllabus.html#draft-course-schedule",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.1 Draft Course Schedule",
    "text": "4.1 Draft Course Schedule\nTable below shows classes and topics planned. Each class has both an insight (aka theory, conceptual) and a skills (aka tech, practical) component. These will become links to materials for the class.\n\n\n\n\n\n\n\n\nFirst Class\n\n\n\n\nSecond Class\n\n\n\n\n\nWeek\n\n\nDay\n\n\nModule\n\n\nTopic\n\n\nDay\n\n\nModule\n\n\nTopic\n\n\n\n\n\n\n1\n\n\nMon Jan 09\n\n\nIntroduction\n\n\nSyllabus Review\n\n\nWed Jan 11\n\n\nIntroduction\n\n\nPaper Planes: Innovation and collaboration\n\n\n\n\n2\n\n\nMon Jan 16\n\n\nNo Meeting\n\n\nNo meeting: MLK day\n\n\nWed Jan 18\n\n\nSkills\n\n\nPaper Planes: Version Controlgit add, commit via paper planes and tables\n\n\n\n\n3\n\n\nMon Jan 23\n\n\nInsights\n\n\nWhat is open source? Chapter 3\n\n\nWed Jan 25\n\n\nSkills\n\n\nGit basic workflowgit add, commit (locally)\n\n\n\n\n4\n\n\nMon Jan 30\n\n\nInsights\n\n\nMotivations and Asking questions people want to answer\n\n\nWed Feb 01\n\n\nNo Meeting\n\n\nNo meeting: Ice Storm\n\n\n\n\n5\n\n\nMon Feb 06\n\n\nInsights\n\n\nLicenses Chapter 4\n\n\nWed Feb 08\n\n\nSkills\n\n\nRewinding workrevert, other undos, checking out old versions, rewriting history\n\n\n\n\n6\n\n\nMon Feb 13\n\n\nInsights\n\n\nCoordination\n\n\nWed Feb 15\n\n\nSkills\n\n\nBranchinggit checkout, merge. See Local Branching\n\n\n\n\n7\n\n\nMon Feb 20\n\n\nNo Meeting\n\n\nNo meeting: Instructor Travel\n\n\nWed Feb 22\n\n\nSkills\n\n\nSharing and conflictsgithub fork, git clone, push, pull request, pull upstream, merge, conflicts, mark resolved, collaboration workflows\n\n\n\n\n8\n\n\nMon Feb 27\n\n\nInsights\n\n\nGovernance and decision making\n\n\nWed Mar 01\n\n\nSkills\n\n\nCollaboration workflowsgit rebase. Git exercises\n\n\n\n\n9\n\n\nMon Mar 06\n\n\nInsights\n\n\nKnowledge sharing\n\n\nWed Mar 08\n\n\nSkills\n\n\nDocumentation and Q&Agithub flavored markdown\n\n\n\n\n10\n\n\nMon Mar 13\n\n\nNo Meeting\n\n\nNo meeting: Spring Break\n\n\nWed Mar 15\n\n\nNo Meeting\n\n\nNo meeting: Spring Break\n\n\n\n\n11\n\n\nMon Mar 20\n\n\nInsights\n\n\nBias and lack of diversity\n\n\nWed Mar 22\n\n\nSkills\n\n\nUnit TestsTest suites\n\n\n\n\n12\n\n\nMon Mar 27\n\n\nInsights\n\n\nAgile and test driven development\n\n\nWed Mar 29\n\n\nSkills\n\n\nContinuous IntegrationTravis CI integration, Github Actions\n\n\n\n\n13\n\n\nMon Apr 03\n\n\nInsights\n\n\nThe stack and the stream\n\n\nWed Apr 05\n\n\nSkills\n\n\nRelease managementgithub releases, git tag\n\n\n\n\n14\n\n\nMon Apr 10\n\n\nInsights\n\n\nCybersecurity and open source\n\n\nWed Apr 12\n\n\nSkills\n\n\nCreating and distributing packagespython packages, pypy pinning\n\n\n\n\n15\n\n\nMon Apr 17\n\n\nPresentations\n\n\nPresentations\n\n\nWed Apr 19\n\n\nPresentations\n\n\nPresentations"
  },
  {
    "objectID": "oss_syllabus.html#skills-readings",
    "href": "oss_syllabus.html#skills-readings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.2 Skills Readings",
    "text": "4.2 Skills Readings"
  },
  {
    "objectID": "oss_syllabus.html#insight-readings",
    "href": "oss_syllabus.html#insight-readings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "4.3 Insight Readings",
    "text": "4.3 Insight Readings\nOften I can link directly to websites or PDFs, but sometimes I will provide links to articles in journals etc. You must be able to get the article through the library, generally speaking using the web VPN is the most convenient approach. Another option that can sometimes work is UnPaywall which works to find an open access article version when looking at a publisher’s page for the article."
  },
  {
    "objectID": "oss_syllabus.html#class-recordings",
    "href": "oss_syllabus.html#class-recordings",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.1 Class Recordings",
    "text": "5.1 Class Recordings\nClass Recordings: Class recordings are reserved only for students in this class for educational purposes and are protected under FERPA. The recordings should not be shared outside the class in any form. Violation of this restriction by a student could lead to Student Misconduct proceedings. Guidance on public access to class recordings can be found here."
  },
  {
    "objectID": "oss_syllabus.html#academic-integrity",
    "href": "oss_syllabus.html#academic-integrity",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.2 Academic Integrity",
    "text": "5.2 Academic Integrity\nEach student in the course is expected to abide by the University of Texas Honor Code: “As a student of The University of Texas at Austin, I shall abide by the core values of the University and uphold academic integrity.” Plagiarism is taken very seriously at UT. Therefore, if you use words or ideas that are not your own (or that you have used in previous class), you must cite your sources. Otherwise you will be guilty of plagiarism and subject to academic disciplinary action, including failure of the course. In particular, students are reminded that proper citation requires mentioning sources when you use them, not just in a general list of references at the end of a document. You are responsible for understanding UT’s Academic Honesty and the University Honor Code which can be found at the following web address: http://deanofstudents.utexas.edu/sjs/acint_student.php"
  },
  {
    "objectID": "oss_syllabus.html#student-rights-and-responsibilities",
    "href": "oss_syllabus.html#student-rights-and-responsibilities",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.3 Student rights and responsibilities",
    "text": "5.3 Student rights and responsibilities\n\nYou have a right to a learning environment that supports mental and physical wellness.\nYou have a right to respect.\nYou have a right to be assessed and graded fairly.\nYou have a right to freedom of opinion and expression.\nYou have a right to privacy and confidentiality.\nYou have a right to meaningful and equal participation, and to self-organize groups to improve your learning environment.\nYou have a right to learn in an environment that is welcoming to all people. No student shall be isolated, excluded or diminished in any way.\n\nWith these rights come responsibilities:\n\nYou are responsible for taking care of yourself, managing your time, and communicating with the teaching team and with others if things start to feel out of control or overwhelming.\nYou are responsible for acting in a way that is worthy of respect and always respectful of others.\nYour experience with this course is directly related to the quality of the energy that you bring to it, and your energy shapes the quality of your peers’ experiences.\nYou are responsible for creating an inclusive environment and for speaking up when someone is excluded. In particular, you are responsible for ensuring that your participation does not exclude the participation of others. Office hours are available for in-depth further discussion of advanced topics or other interests that pursuing in depth during class would exclude others.\nYou are responsible for holding yourself accountable to these standards, holding each other to these standards, and holding the teaching team accountable as well."
  },
  {
    "objectID": "oss_syllabus.html#personal-pronoun-preference",
    "href": "oss_syllabus.html#personal-pronoun-preference",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.4 Personal Pronoun Preference",
    "text": "5.4 Personal Pronoun Preference\nProfessional courtesy and sensitivity are especially important with respect to individuals and topics dealing with differences of race, culture, religion, politics, sexual orientation, gender, gender variance, and nationalities. Class rosters are provided to the instructor with the student’s legal name. I will gladly honor your request to address you by an alternate name or gender pronoun. Please advise me of this preference early in the semester so that I may make appropriate changes to my records."
  },
  {
    "objectID": "oss_syllabus.html#drop-policy",
    "href": "oss_syllabus.html#drop-policy",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.5 Drop Policy",
    "text": "5.5 Drop Policy\nIf you want to drop a class after the 12th class day, you’ll need to execute a Q drop before the Q-drop deadline, which typically occurs near the middle of the semester. Under Texas law, you are only allowed six Q drops while you are in college at any public Texas institution. For more information, see: http://www.utexas.edu/ugs/csacc/academic/adddrop/qdrop\nInternational students must meet with the international office before dropping a class that would put them below full-time status. Although it is worth noting that there are legitimate reasons that allow International students to be below full-time status, so if you think you are failing a course (or just performing below your expectations) don’t make assumptions either way, speak with the international office to discover your options."
  },
  {
    "objectID": "oss_syllabus.html#university-resources-for-students",
    "href": "oss_syllabus.html#university-resources-for-students",
    "title": "2  Syllabus for Open Source Software Development",
    "section": "5.6 University Resources for Students",
    "text": "5.6 University Resources for Students\nYour success in this class is important to me. We will all need accommodations at different times because we all learn differently. If there are aspects of this course that prevent you from learning or exclude you, please let me know as soon as possible. Together we’ll develop strategies to meet both your needs and the requirements of the course. There are also a range of resources on campus, detailed below.\n\n5.6.1 Accessible/Compliant Statement:\nIf you are a student with a disability, or think you may have a disability, and need accommodations please contact Disability and Access (D&A). You may refer to D&A’s website for contact and more information: http://diversity.utexas.edu/disability/. If you are already registered with D&A, please deliver your Accommodation Letter to me as early as possible in the semester so we can discuss your approved accommodations.\n\n\n5.6.2 Accessible, Inclusive, and Compliant Statement:\nThe university is committed to creating an accessible and inclusive learning environment consistent with university policy and federal and state law. Please let me know if you experience any barriers to learning so I can work with you to ensure you have equal opportunity to participate fully in this course. If you are a student with a disability, or think you may have a disability, and need accommodations please contact Disability and Access (D&A). Please refer to D&A’s website for contact and more information: http://diversity.utexas.edu/disability/. If you are already registered with D&A , please deliver your Accommodation Letter to me as early as possible in the semester so we can discuss your approved accommodations and needs in this course.\n\n\n5.6.3 Counseling and Mental Health Center\nAll of us benefit from support during times of struggle. You are not alone. There are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful.\nIf you or anyone you know experiences any academic stress, difficult life events, or feelings like anxiety or depression, we strongly encourage you to seek support. http://www.cmhc.utexas.edu/individualcounseling.html\n\n\n5.6.4 The Sanger Learning Center\nAll students, including graduate students, are welcome to take advantage of Sanger Center’s classes and workshops, private learning specialist appointments, peer academic coaching, and tutoring for more than 70 courses in 15 different subject areas. For more information, please visit https://ugs.utexas.edu/slc/grad or call 512-471-3614 (JES A332).\n\n\n5.6.5 University Writing Center free programs for grad students\n\n\n5.6.6 Libraries\n\n\n5.6.7 IT services\n\n\n5.6.8 Student Emergency Services\n\n\n5.6.9 Important Safety Information\nIf you have concerns about the safety or behavior of fellow students, TAs or Professors, call BCAL (the Behavior Concerns Advice Line): 512-232-5050. Your call can be anonymous. If something doesn’t feel right—it probably isn’t. Trust your instincts and share your concerns.\nThe following recommendations regarding emergency evacuation from the Office of Campus Safety and Security, 512-471-5767, http://www.utexas.edu/safety/\nOccupants of buildings on The University of Texas at Austin campus are required to evacuate buildings when a fire alarm is activated. Alarm activation or announcement requires exiting and assembling outside.\n\nFamiliarize yourself with all exit doors of each classroom and building you may occupy. Remember that the nearest exit door may not be the one you used when entering the building.\nStudents requiring assistance in evacuation shall inform their instructor in writing during the first week of class.\nIn the event of an evacuation, follow the instruction of faculty or class instructors. Do not re-enter a building unless given instructions by the following: Austin Fire Department, The University of Texas at Austin Police Department, or Fire Prevention Services office.\nLink to information regarding emergency evacuation routes and emergency procedures can be found at: http://www.utexas.edu/emergency"
  },
  {
    "objectID": "insights/what_is_open_source.html#readings-prior-to-class",
    "href": "insights/what_is_open_source.html#readings-prior-to-class",
    "title": "3  Introduction: What is open source?",
    "section": "3.1 Readings prior to class:",
    "text": "3.1 Readings prior to class:\n\nNadia Eghbal. (2020, December 3). The Making and Maintenance of our Open Source Infrastructure | Nadia Eghbal. https://www.youtube.com/watch?v=5wLKnN3To-k?start=2:00. Watch through ~8:00m.\nRichard Stallman. (2001, May 29). Richard M. Stallman’s speech: “Free Software: Freedom and Cooperation” [Speech Transcript]. https://www.gnu.org/philosophy/rms-nyu-2001-transcript.txt\nVICE (Director). (2020, March 3). Farmers Are Hacking Their Tractors Because of a Repair Ban. https://www.youtube.com/watch?v=EPYy_g8NzmI"
  },
  {
    "objectID": "insights/what_is_open_source.html#where-is-open-source",
    "href": "insights/what_is_open_source.html#where-is-open-source",
    "title": "3  Introduction: What is open source?",
    "section": "3.2 Where is open source?",
    "text": "3.2 Where is open source?\nOpen source is everywhere.\nFamous pieces of open source software:\n\nFirefox browser\nZotero reference manager\nThe pandas data manipulation framework\n\nOften it is fairly hidden from end users. This can be because it is running on servers (and not installed by end-users), such as\n\nApache httpd\npostman\n\nSometimes it is just underneath a proprietary layer, such as\n\nChromium (underlies Chrome)\nVS Codium (underlies Microsoft’s VS Code)\n\nOften it is well ‘below the surface’ deeper in the dependencies.\n\nWindows (many, many components, famously the internet stack)\nMacOS (Darwin kernel)\nTableau (many components, see https://www.tableau.com/blog/tableau-and-open-source-advantage)\nSnowflake (Apache Arrow)\n\nOpen source is everywhere:\n\nLaptops\nPhones\nServers\nInternet routers (email, BGP)\nWifi routers\nCars, Radios, Watches, Batteries\n\nhttps://thenewstack.io/the-open-source-lesson-of-the-linksys-wrt54g-router/\n\nDatascience software.\n\nhttps://posit.co/products/open-source/rstudio/ https://jupyter.org/governance/projectlicense.html"
  },
  {
    "objectID": "insights/what_is_open_source.html#why-open-source",
    "href": "insights/what_is_open_source.html#why-open-source",
    "title": "3  Introduction: What is open source?",
    "section": "3.3 Why open source?",
    "text": "3.3 Why open source?\n\n3.3.1 For the right to repair\nThe readings focused on this, highlighting current challenges in repair. You read about farmers who purchase John Deere farm equipment. Many want to be able to work on their equipment on their own, right on the farm. This is both because they are at a great distance from dealers, the equipment is expensive to transport, and they have paid a lot for the equipment and object to paying more to keep it working.\nIn many ways this is the same situation that Richard Stallman (found of the Free Software Foundation) faced when dealing with the printer in his office. This is one of the foundational stories of the free software movement.\nHave you faced issues in trying to repair something? What prevented you?\nDiscussion: what is needed to repair a blender? A car? A list sorting algorithm? A web-page?\nWhat role does source code play? What else is needed?\n\n\n3.3.2 To avoid “proprietary lock in”\nThe popularity of open source can be understand as a kind of software escrow. Producers of tools want their users to rely on the tool, but if the code is hidden then a user is taking on a significant risk. That is is that the software stops getting updated because the company disappears. This means that maintenance stops, which means that the code suffers “bit rot” or “code collapse”.\n“Code collapse” occurs when software is not maintained. Not only do new features not appear, but security holes can be discovered which cannot be fixed. More subtly the code gets out of sync with its ecosystem, so that the way it talks to other software might stop working as other software is updated. If something changes in the software requirements (e.g., a change in the tax code) then the software cannot be updated.\nSo the buyer of proprietary software want an assurance that the software will continue to be updated, but no firm can assure its customers that it will be around for ever. To solve this purchasers used an approach called “Software Escrow”. Escrow means using a 3rd party (not the firm buying the software and not the firm building the software) to keep a copy of the software delivered. That escrow agent keeps that code secret unless specific events occurs, such as the software producer going out of business or discontinuing the product. In those cases the firm buying the code gets the source (and a license to use it). Escrow is a sort of insurance policy to help make relying on other people less risky.\nOpen source shares some of these characteristics. When building on someone else’s code, knowing it is open source means that the user can be sure they can taken over maintenance, even if the original developers stop working on the project.\n\n\n3.3.3 Shared maintenance of infrastructure\nWhen organizations compete with each other they want you to purchase their product, and not the product of their competitor. To purchase “Extra” brand chewing gum, and not “Trident” brand.\nYet much of the effort that goes into producing a product is spent on things that are not directly related to the product they are selling. Think of things like the supply of office furniture, the repainting of lines in the parking lot. These sort of efforts are known as “infrastructure”.\nIn many cases infrastructure is purchased from other companies, known as “contracting” or “out-sourcing”. The general logic is that companies that specialize in office furniture will do a better and cheaper job than if the chewing gum company was to make (or even buy) its own furniture. For example, Economics of scale mean that the outsourced furniture company can get bulk purchase discounts and pass them on to customers. They can also have full time people focused on monitoring safety issues with furniture and be responsible for fixing or replacing chairs that might injure people, saving the chewing gum company from lawsuits for dangerous chairs.\nMany users of open source are using open source software in the same way. For example IBM had a product called “WebSphere” which they sold to firms to run their “intranet” (internal corporate network publishing information or managing business processes). IBM originally wrote and maintained their own web server (as well as the application software that ran on top of it). Eventually, though, they changed to using the open source web server called Apache httpd. They argued that this saved them a lot of time maintaining their own infrastructure internally.\nIBM even started contributing changes that it needed or were helpful to their product back to httpd. They could have kept those changes secret, but then they would just have more infrastructure to maintain. Instead, they reasoned, they would contribute those changes back to httpd, effectively giving that work to their competitors (and everyone), but in return they received a lot more eyeballs on that code, ensuring that it was better tested and kept in sync.\nThey shared the cost of maintenance on the infrastructure to concentrate effort on their “secret sauce” of the WebSphere application layer, which was the thing that customers were really buying from them.\n\n\n3.3.4 The smartest people don’t work for you\nEach firm competes to hire great people. Yet it is unreasonable to think that you will have all the best people in the world working at your organization. For this reason firms seek to access outside intelligence. Sometimes this is possible through outsourcing, but other times problems are quite specific and require engagement with information or requirements that are quite specific to the business.\nBill Joy (from Sun Microsystems)is credited with the saying,\n\n“no matter who you are, most of the smartest people work for someone else,\n\nFirms therefore wna to access those smart people. Various approachs help, including “Crowdsourcing,” “innovation contests,” and “thought leadership” (publishing white papers and blogs that are discussed in public and then watching the discussion).\nOpen source projects are another place where expert outsiders can be found and engaged on topics of importance to firms."
  },
  {
    "objectID": "insights/what_is_open_source.html#why-is-open-source-interesting",
    "href": "insights/what_is_open_source.html#why-is-open-source-interesting",
    "title": "3  Introduction: What is open source?",
    "section": "3.4 Why is open source interesting?",
    "text": "3.4 Why is open source interesting?\nOpen source is interesting to a wide group of thinkers, both academics and thinkers in business and software.\n\nOpen source is successful. Almost all software has a foundation of open source, and open source tools successfully compete with proprietary software.\nThat success is unexpected. Why “give it away”, why “work for free”?\nOpen source (and Free Software) are politically engaged, holding the belief that they can changed the world through openness and freedom. Those building openly find this an emancipatory experience that they want to share with others (see Dunbar-Hestor’s “Hacking Diversity” book)\nOpen source is the leading edge of distributed work. Open source is done online, with participants that often don’t know each other and are all around the world. All the issues of remote work were encountered first in open source, which has developed interesting approaches to these problems."
  },
  {
    "objectID": "insights/what_is_open_source.html#topics-to-be-covered",
    "href": "insights/what_is_open_source.html#topics-to-be-covered",
    "title": "3  Introduction: What is open source?",
    "section": "3.5 Topics to be covered",
    "text": "3.5 Topics to be covered\n\nMotivations for participation\nLicences\nCoordination\nGovernance\nBias and lack of diversity\nSoftware collapse, packaging and dependencies\nContinuous Integration"
  },
  {
    "objectID": "insights/licenses.html#readings-prior-to-class",
    "href": "insights/licenses.html#readings-prior-to-class",
    "title": "4  Licenses",
    "section": "4.1 Readings prior to class",
    "text": "4.1 Readings prior to class\nA chapter from a book, and four blog style articles. The book chapter should take between 1-2 hours to read, the blogs should take about another 20-40 minutes.\n\nChapter “Writing Copyright Licenses” of Kelty, C. M. (2008). Two Bits: The Cultural Significance of Free Software. Durham: Duke University Press Books. https://twobits.net/pub/Kelty-TwoBits.pdf#page=195\nA medium length chapter describing how open source licenses came to be. Should take between 1 and 2 hours to read.\nThe Open Source Definition. https://opensource.org/osd\n\nQuick list of elements to be found in open source licenses\nFSF Settles Suit Against Cisco. https://www.fsf.org/news/2009-05-cisco-settlement.html\nA summary of the Free Software Foundation enforcing the GPL license\nAmazon: NOT OK - why we had to change Elastic licensing. (2021, January 19). Elastic Blog. https://www.elastic.co/blog/why-license-change-AWS\n\nA summary of a recent trend in open source breaks with the “no field of use” restrictions, trying to sustain an open source business model funded by cloud service delivery.\nCarlos Munoz Ferrandis. (2022, August 31). OpenRAIL: Towards open and responsible AI licensing frameworks. Hugging Face Blog. https://huggingface.co/blog/open_rail\n\nMachine learning leaders, huggingface (yes, that’s their real company name), explaining why sharing trained AI/neutral network models/weights is both similar to sharing code and different, proposing a new license focused on ethical reuse of shared trained models."
  }
]